version: '3.8'

services:
  browser-use-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: browser-use-api
    ports:
      - "5000:5000"
    environment:
      - BROWSER_USE_API_KEY=${BROWSER_USE_API_KEY}
      - PORT=5000
      - DEBUG=${DEBUG:-false}
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - browser-use-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.browser-use-api.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.browser-use-api.tls=true"
      - "traefik.http.routers.browser-use-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.browser-use-api.loadbalancer.server.port=5000"

  # Opcional: Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: browser-use-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - browser-use-api
    restart: unless-stopped
    networks:
      - browser-use-network
    profiles:
      - nginx

  # Opcional: Redis para cache (futuras implementações)
  redis:
    image: redis:7-alpine
    container_name: browser-use-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - browser-use-network
    profiles:
      - cache

networks:
  browser-use-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
